name: Build & Deploy (manual por ambiente)

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Ambiente (dev|hmg|prd)"
        required: true
        default: "dev"

permissions:
  contents: read
  packages: write

# No topo do workflow
concurrency:
  group: argocd-${{ github.workflow }}-${{ github.ref }}-${{ inputs.app || env.APP }}
  cancel-in-progress: false


  
jobs:
  build-and-deploy:
    runs-on: [self-hosted, wsl]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        env:
            DOTNET_INSTALL_DIR: ${{ runner.temp }}/.dotnet   # pasta única por job
        with:
            dotnet-version: '8.0.x'
            cache: false

      - name: Export DOTNET vars
        run: |
            echo "DOTNET_ROOT=${{ runner.temp }}/.dotnet" >> $GITHUB_ENV
            echo "${{ runner.temp }}/.dotnet" >> $GITHUB_PATH

      - name: Build .NET
        working-directory: app/HelloApi
        run: |
          dotnet restore
          dotnet publish -c Release -o out

      - name: Login GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Define tags
        id: vars
        run: |
          IMAGE="ghcr.io/${{ github.repository }}/helloapi"
          SHORT_SHA="${GITHUB_SHA::7}"
          case "${{ github.event.inputs.env }}" in
            dev|hmg|prd) TAG="${{ github.event.inputs.env }}-${SHORT_SHA}" ;;
            *) echo "Env inválido"; exit 1 ;;
          esac
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Docker build & push
        working-directory: app/HelloApi
        run: |
          docker build -t ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.tag }} .
          docker push ${{ steps.vars.outputs.image }}:${{ steps.vars.outputs.tag }}

      - name: ArgoCD login (CLI)
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} \
            --username ${{ secrets.ARGOCD_USERNAME }} \
            --password ${{ secrets.ARGOCD_PASSWORD }} \
            --grpc-web --insecure

    #   - name: Set image tag + sync
    #     run: |
    #       APP="helloapi-${{ github.event.inputs.env }}"
    #       argocd app set "$APP" -p image.tag=${{ steps.vars.outputs.tag }} --grpc-web
    #       argocd app sync "$APP" --grpc-web
    #       argocd app wait "$APP" --health --timeout 300 --grpc-web

      - name: Deploy with Argo CD
        env:
            APP: helloapi-prd
            TAG: prd-7d6caee
        shell: bash
        run: |
            set -euo pipefail

            echo "Checando operações pendentes em $APP..."
            # Se houver operação em andamento, aguarda (não falha se tempo expirar)
            argocd app wait "$APP" --operation --timeout 900 --grpc-web || true

            echo "Definindo image.tag=$TAG"
            argocd app set "$APP" -p image.tag="$TAG" --grpc-web

            echo "Verificando se Auto-Sync está habilitado..."
            if argocd app get "$APP" --grpc-web | grep -q "Auto-Sync: Enabled"; then
            echo "Auto-Sync habilitado. Aguardando a operação do controller..."
            argocd app wait "$APP" --operation --timeout 900 --grpc-web
            else
            echo "Auto-Sync desabilitado. Disparando sync manual com retry..."
            retries=5
            for i in $(seq 1 $retries); do
                if argocd app sync "$APP" --grpc-web --timeout 900; then
                break
                fi
                echo "Sync falhou (possível operação em andamento). Tentativa $i/$retries."
                argocd app wait "$APP" --operation --timeout 600 --grpc-web || true
                sleep 10
                if [ "$i" -eq "$retries" ]; then
                echo "Falhou após $retries tentativas."
                exit 1
                fi
            done
            fi

            echo "Aguardando ficar Healthy..."
            argocd app wait "$APP" --health --timeout 900 --grpc-web

        echo "OK ✅"

                
